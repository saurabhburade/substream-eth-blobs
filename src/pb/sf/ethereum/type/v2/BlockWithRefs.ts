// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";
import { Block } from "./Block";
import { TransactionRefs } from "./TransactionRefs";

export class BlockWithRefs {
  static encode(message: BlockWithRefs, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.id);

    const block = message.block;
    if (block !== null) {
      writer.uint32(18);
      writer.fork();
      Block.encode(block, writer);
      writer.ldelim();
    }

    const transactionTraceRefs = message.transactionTraceRefs;
    if (transactionTraceRefs !== null) {
      writer.uint32(26);
      writer.fork();
      TransactionRefs.encode(transactionTraceRefs, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.bool(message.irreversible);
  }

  static decode(reader: Reader, length: i32): BlockWithRefs {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BlockWithRefs();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;

        case 2:
          message.block = Block.decode(reader, reader.uint32());
          break;

        case 3:
          message.transactionTraceRefs = TransactionRefs.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.irreversible = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  id: string;
  block: Block | null;
  transactionTraceRefs: TransactionRefs | null;
  irreversible: bool;

  constructor(
    id: string = "",
    block: Block | null = null,
    transactionTraceRefs: TransactionRefs | null = null,
    irreversible: bool = false
  ) {
    this.id = id;
    this.block = block;
    this.transactionTraceRefs = transactionTraceRefs;
    this.irreversible = irreversible;
  }
}
