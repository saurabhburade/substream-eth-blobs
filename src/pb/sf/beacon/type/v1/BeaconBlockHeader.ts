// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";

export class BeaconBlockHeader {
  static encode(message: BeaconBlockHeader, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.slot);

    writer.uint32(16);
    writer.uint64(message.proposerIndex);

    writer.uint32(26);
    writer.bytes(message.parentRoot);

    writer.uint32(34);
    writer.bytes(message.stateRoot);

    writer.uint32(42);
    writer.bytes(message.bodyRoot);
  }

  static decode(reader: Reader, length: i32): BeaconBlockHeader {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BeaconBlockHeader();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.slot = reader.uint64();
          break;

        case 2:
          message.proposerIndex = reader.uint64();
          break;

        case 3:
          message.parentRoot = reader.bytes();
          break;

        case 4:
          message.stateRoot = reader.bytes();
          break;

        case 5:
          message.bodyRoot = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  slot: u64;
  proposerIndex: u64;
  parentRoot: Uint8Array;
  stateRoot: Uint8Array;
  bodyRoot: Uint8Array;

  constructor(
    slot: u64 = 0,
    proposerIndex: u64 = 0,
    parentRoot: Uint8Array = new Uint8Array(0),
    stateRoot: Uint8Array = new Uint8Array(0),
    bodyRoot: Uint8Array = new Uint8Array(0)
  ) {
    this.slot = slot;
    this.proposerIndex = proposerIndex;
    this.parentRoot = parentRoot;
    this.stateRoot = stateRoot;
    this.bodyRoot = bodyRoot;
  }
}
