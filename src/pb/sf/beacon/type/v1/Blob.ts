// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";

export class Blob {
  static encode(message: Blob, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.index);

    writer.uint32(18);
    writer.bytes(message.blob);

    writer.uint32(26);
    writer.bytes(message.kzgCommitment);

    writer.uint32(34);
    writer.bytes(message.kzgProof);

    const kzgCommitmentInclusionProof = message.kzgCommitmentInclusionProof;
    if (kzgCommitmentInclusionProof.length !== 0) {
      for (let i: i32 = 0; i < kzgCommitmentInclusionProof.length; ++i) {
        writer.uint32(42);
        writer.bytes(kzgCommitmentInclusionProof[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): Blob {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Blob();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.index = reader.uint64();
          break;

        case 2:
          message.blob = reader.bytes();
          break;

        case 3:
          message.kzgCommitment = reader.bytes();
          break;

        case 4:
          message.kzgProof = reader.bytes();
          break;

        case 5:
          message.kzgCommitmentInclusionProof.push(reader.bytes());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  index: u64;
  blob: Uint8Array;
  kzgCommitment: Uint8Array;
  kzgProof: Uint8Array;
  kzgCommitmentInclusionProof: Array<Uint8Array>;

  constructor(
    index: u64 = 0,
    blob: Uint8Array = new Uint8Array(0),
    kzgCommitment: Uint8Array = new Uint8Array(0),
    kzgProof: Uint8Array = new Uint8Array(0),
    kzgCommitmentInclusionProof: Array<Uint8Array> = []
  ) {
    this.index = index;
    this.blob = blob;
    this.kzgCommitment = kzgCommitment;
    this.kzgProof = kzgProof;
    this.kzgCommitmentInclusionProof = kzgCommitmentInclusionProof;
  }
}
