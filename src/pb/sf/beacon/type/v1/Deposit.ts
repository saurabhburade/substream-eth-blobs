// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";
import { DepositData } from "./DepositData";

export class Deposit {
  static encode(message: Deposit, writer: Writer): void {
    const proof = message.proof;
    if (proof.length !== 0) {
      for (let i: i32 = 0; i < proof.length; ++i) {
        writer.uint32(10);
        writer.bytes(proof[i]);
      }
    }

    const data = message.data;
    if (data !== null) {
      writer.uint32(18);
      writer.fork();
      DepositData.encode(data, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Deposit {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Deposit();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.proof.push(reader.bytes());
          break;

        case 2:
          message.data = DepositData.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  proof: Array<Uint8Array>;
  data: DepositData | null;

  constructor(proof: Array<Uint8Array> = [], data: DepositData | null = null) {
    this.proof = proof;
    this.data = data;
  }
}
