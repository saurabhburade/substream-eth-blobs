// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";

export class DepositData {
  static encode(message: DepositData, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.publicKey);

    writer.uint32(18);
    writer.bytes(message.withdrawalCredentials);

    writer.uint32(24);
    writer.uint64(message.gwei);

    writer.uint32(34);
    writer.bytes(message.signature);
  }

  static decode(reader: Reader, length: i32): DepositData {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DepositData();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.publicKey = reader.bytes();
          break;

        case 2:
          message.withdrawalCredentials = reader.bytes();
          break;

        case 3:
          message.gwei = reader.uint64();
          break;

        case 4:
          message.signature = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  publicKey: Uint8Array;
  withdrawalCredentials: Uint8Array;
  gwei: u64;
  signature: Uint8Array;

  constructor(
    publicKey: Uint8Array = new Uint8Array(0),
    withdrawalCredentials: Uint8Array = new Uint8Array(0),
    gwei: u64 = 0,
    signature: Uint8Array = new Uint8Array(0)
  ) {
    this.publicKey = publicKey;
    this.withdrawalCredentials = withdrawalCredentials;
    this.gwei = gwei;
    this.signature = signature;
  }
}
