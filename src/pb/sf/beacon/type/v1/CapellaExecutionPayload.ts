// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";
import { Timestamp } from "../../../../google/protobuf/Timestamp";
import { Withdrawal } from "./Withdrawal";

export class CapellaExecutionPayload {
  static encode(message: CapellaExecutionPayload, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.parentHash);

    writer.uint32(18);
    writer.bytes(message.feeRecipient);

    writer.uint32(26);
    writer.bytes(message.stateRoot);

    writer.uint32(34);
    writer.bytes(message.receiptsRoot);

    writer.uint32(42);
    writer.bytes(message.logsBloom);

    writer.uint32(50);
    writer.bytes(message.prevRandao);

    writer.uint32(56);
    writer.uint64(message.blockNumber);

    writer.uint32(64);
    writer.uint64(message.gasLimit);

    writer.uint32(72);
    writer.uint64(message.gasUsed);

    const timestamp = message.timestamp;
    if (timestamp !== null) {
      writer.uint32(82);
      writer.fork();
      Timestamp.encode(timestamp, writer);
      writer.ldelim();
    }

    writer.uint32(90);
    writer.bytes(message.extraData);

    writer.uint32(98);
    writer.bytes(message.baseFeePerGas);

    writer.uint32(106);
    writer.bytes(message.blockHash);

    const transactions = message.transactions;
    if (transactions.length !== 0) {
      for (let i: i32 = 0; i < transactions.length; ++i) {
        writer.uint32(114);
        writer.bytes(transactions[i]);
      }
    }

    const withdrawals = message.withdrawals;
    for (let i: i32 = 0; i < withdrawals.length; ++i) {
      writer.uint32(122);
      writer.fork();
      Withdrawal.encode(withdrawals[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): CapellaExecutionPayload {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new CapellaExecutionPayload();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.parentHash = reader.bytes();
          break;

        case 2:
          message.feeRecipient = reader.bytes();
          break;

        case 3:
          message.stateRoot = reader.bytes();
          break;

        case 4:
          message.receiptsRoot = reader.bytes();
          break;

        case 5:
          message.logsBloom = reader.bytes();
          break;

        case 6:
          message.prevRandao = reader.bytes();
          break;

        case 7:
          message.blockNumber = reader.uint64();
          break;

        case 8:
          message.gasLimit = reader.uint64();
          break;

        case 9:
          message.gasUsed = reader.uint64();
          break;

        case 10:
          message.timestamp = Timestamp.decode(reader, reader.uint32());
          break;

        case 11:
          message.extraData = reader.bytes();
          break;

        case 12:
          message.baseFeePerGas = reader.bytes();
          break;

        case 13:
          message.blockHash = reader.bytes();
          break;

        case 14:
          message.transactions.push(reader.bytes());
          break;

        case 15:
          message.withdrawals.push(Withdrawal.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  parentHash: Uint8Array;
  feeRecipient: Uint8Array;
  stateRoot: Uint8Array;
  receiptsRoot: Uint8Array;
  logsBloom: Uint8Array;
  prevRandao: Uint8Array;
  blockNumber: u64;
  gasLimit: u64;
  gasUsed: u64;
  timestamp: Timestamp | null;
  extraData: Uint8Array;
  baseFeePerGas: Uint8Array;
  blockHash: Uint8Array;
  transactions: Array<Uint8Array>;
  withdrawals: Array<Withdrawal>;

  constructor(
    parentHash: Uint8Array = new Uint8Array(0),
    feeRecipient: Uint8Array = new Uint8Array(0),
    stateRoot: Uint8Array = new Uint8Array(0),
    receiptsRoot: Uint8Array = new Uint8Array(0),
    logsBloom: Uint8Array = new Uint8Array(0),
    prevRandao: Uint8Array = new Uint8Array(0),
    blockNumber: u64 = 0,
    gasLimit: u64 = 0,
    gasUsed: u64 = 0,
    timestamp: Timestamp | null = null,
    extraData: Uint8Array = new Uint8Array(0),
    baseFeePerGas: Uint8Array = new Uint8Array(0),
    blockHash: Uint8Array = new Uint8Array(0),
    transactions: Array<Uint8Array> = [],
    withdrawals: Array<Withdrawal> = []
  ) {
    this.parentHash = parentHash;
    this.feeRecipient = feeRecipient;
    this.stateRoot = stateRoot;
    this.receiptsRoot = receiptsRoot;
    this.logsBloom = logsBloom;
    this.prevRandao = prevRandao;
    this.blockNumber = blockNumber;
    this.gasLimit = gasLimit;
    this.gasUsed = gasUsed;
    this.timestamp = timestamp;
    this.extraData = extraData;
    this.baseFeePerGas = baseFeePerGas;
    this.blockHash = blockHash;
    this.transactions = transactions;
    this.withdrawals = withdrawals;
  }
}
