// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";
import { Checkpoint } from "./Checkpoint";

export class AttestationData {
  static encode(message: AttestationData, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.slot);

    writer.uint32(16);
    writer.uint64(message.committeeIndex);

    writer.uint32(26);
    writer.bytes(message.beaconBlockRoot);

    const source = message.source;
    if (source !== null) {
      writer.uint32(34);
      writer.fork();
      Checkpoint.encode(source, writer);
      writer.ldelim();
    }

    const target = message.target;
    if (target !== null) {
      writer.uint32(42);
      writer.fork();
      Checkpoint.encode(target, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): AttestationData {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new AttestationData();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.slot = reader.uint64();
          break;

        case 2:
          message.committeeIndex = reader.uint64();
          break;

        case 3:
          message.beaconBlockRoot = reader.bytes();
          break;

        case 4:
          message.source = Checkpoint.decode(reader, reader.uint32());
          break;

        case 5:
          message.target = Checkpoint.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  slot: u64;
  committeeIndex: u64;
  beaconBlockRoot: Uint8Array;
  source: Checkpoint | null;
  target: Checkpoint | null;

  constructor(
    slot: u64 = 0,
    committeeIndex: u64 = 0,
    beaconBlockRoot: Uint8Array = new Uint8Array(0),
    source: Checkpoint | null = null,
    target: Checkpoint | null = null
  ) {
    this.slot = slot;
    this.committeeIndex = committeeIndex;
    this.beaconBlockRoot = beaconBlockRoot;
    this.source = source;
    this.target = target;
  }
}
