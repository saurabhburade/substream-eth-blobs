// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";

export class BLSToExecutionChange {
  static encode(message: BLSToExecutionChange, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.validatorIndex);

    writer.uint32(18);
    writer.bytes(message.fromBlsPubKey);

    writer.uint32(26);
    writer.bytes(message.toExecutionAddress);
  }

  static decode(reader: Reader, length: i32): BLSToExecutionChange {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BLSToExecutionChange();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.validatorIndex = reader.uint64();
          break;

        case 2:
          message.fromBlsPubKey = reader.bytes();
          break;

        case 3:
          message.toExecutionAddress = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  validatorIndex: u64;
  fromBlsPubKey: Uint8Array;
  toExecutionAddress: Uint8Array;

  constructor(
    validatorIndex: u64 = 0,
    fromBlsPubKey: Uint8Array = new Uint8Array(0),
    toExecutionAddress: Uint8Array = new Uint8Array(0)
  ) {
    this.validatorIndex = validatorIndex;
    this.fromBlsPubKey = fromBlsPubKey;
    this.toExecutionAddress = toExecutionAddress;
  }
}
