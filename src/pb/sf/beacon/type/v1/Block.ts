// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";
import { Phase0Body } from "./Phase0Body";
import { AltairBody } from "./AltairBody";
import { BellatrixBody } from "./BellatrixBody";
import { CapellaBody } from "./CapellaBody";
import { DenebBody } from "./DenebBody";
import { Timestamp } from "../../../../google/protobuf/Timestamp";
import { Spec } from "./Spec";

export class Block {
  static encode(message: Block, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.version);

    writer.uint32(16);
    writer.int32(message.spec);

    writer.uint32(24);
    writer.uint64(message.slot);

    writer.uint32(32);
    writer.uint64(message.parentSlot);

    writer.uint32(42);
    writer.bytes(message.root);

    writer.uint32(50);
    writer.bytes(message.parentRoot);

    writer.uint32(58);
    writer.bytes(message.stateRoot);

    writer.uint32(64);
    writer.uint64(message.proposerIndex);

    writer.uint32(74);
    writer.bytes(message.bodyRoot);

    const phase0 = message.phase0;
    if (phase0 !== null) {
      writer.uint32(162);
      writer.fork();
      Phase0Body.encode(phase0, writer);
      writer.ldelim();
    }

    const altair = message.altair;
    if (altair !== null) {
      writer.uint32(170);
      writer.fork();
      AltairBody.encode(altair, writer);
      writer.ldelim();
    }

    const bellatrix = message.bellatrix;
    if (bellatrix !== null) {
      writer.uint32(178);
      writer.fork();
      BellatrixBody.encode(bellatrix, writer);
      writer.ldelim();
    }

    const capella = message.capella;
    if (capella !== null) {
      writer.uint32(186);
      writer.fork();
      CapellaBody.encode(capella, writer);
      writer.ldelim();
    }

    const deneb = message.deneb;
    if (deneb !== null) {
      writer.uint32(194);
      writer.fork();
      DenebBody.encode(deneb, writer);
      writer.ldelim();
    }

    writer.uint32(242);
    writer.bytes(message.signature);

    const timestamp = message.timestamp;
    if (timestamp !== null) {
      writer.uint32(250);
      writer.fork();
      Timestamp.encode(timestamp, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Block {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Block();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.version = reader.uint32();
          break;

        case 2:
          message.spec = reader.int32();
          break;

        case 3:
          message.slot = reader.uint64();
          break;

        case 4:
          message.parentSlot = reader.uint64();
          break;

        case 5:
          message.root = reader.bytes();
          break;

        case 6:
          message.parentRoot = reader.bytes();
          break;

        case 7:
          message.stateRoot = reader.bytes();
          break;

        case 8:
          message.proposerIndex = reader.uint64();
          break;

        case 9:
          message.bodyRoot = reader.bytes();
          break;

        case 20:
          message.phase0 = Phase0Body.decode(reader, reader.uint32());
          break;

        case 21:
          message.altair = AltairBody.decode(reader, reader.uint32());
          break;

        case 22:
          message.bellatrix = BellatrixBody.decode(reader, reader.uint32());
          break;

        case 23:
          message.capella = CapellaBody.decode(reader, reader.uint32());
          break;

        case 24:
          message.deneb = DenebBody.decode(reader, reader.uint32());
          break;

        case 30:
          message.signature = reader.bytes();
          break;

        case 31:
          message.timestamp = Timestamp.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  version: u32;
  spec: Spec;
  slot: u64;
  parentSlot: u64;
  root: Uint8Array;
  parentRoot: Uint8Array;
  stateRoot: Uint8Array;
  proposerIndex: u64;
  bodyRoot: Uint8Array;
  phase0: Phase0Body | null;
  altair: AltairBody | null;
  bellatrix: BellatrixBody | null;
  capella: CapellaBody | null;
  deneb: DenebBody | null;
  signature: Uint8Array;
  timestamp: Timestamp | null;

  constructor(
    version: u32 = 0,
    spec: Spec = 0,
    slot: u64 = 0,
    parentSlot: u64 = 0,
    root: Uint8Array = new Uint8Array(0),
    parentRoot: Uint8Array = new Uint8Array(0),
    stateRoot: Uint8Array = new Uint8Array(0),
    proposerIndex: u64 = 0,
    bodyRoot: Uint8Array = new Uint8Array(0),
    phase0: Phase0Body | null = null,
    altair: AltairBody | null = null,
    bellatrix: BellatrixBody | null = null,
    capella: CapellaBody | null = null,
    deneb: DenebBody | null = null,
    signature: Uint8Array = new Uint8Array(0),
    timestamp: Timestamp | null = null
  ) {
    this.version = version;
    this.spec = spec;
    this.slot = slot;
    this.parentSlot = parentSlot;
    this.root = root;
    this.parentRoot = parentRoot;
    this.stateRoot = stateRoot;
    this.proposerIndex = proposerIndex;
    this.bodyRoot = bodyRoot;
    this.phase0 = phase0;
    this.altair = altair;
    this.bellatrix = bellatrix;
    this.capella = capella;
    this.deneb = deneb;
    this.signature = signature;
    this.timestamp = timestamp;
  }
}
