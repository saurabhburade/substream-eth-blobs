// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";

export class BlobTransaction {
  static encode(message: BlobTransaction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.hash);

    writer.uint32(16);
    writer.uint64(message.blockNumber);

    writer.uint32(26);
    writer.string(message.timestamp);

    writer.uint32(32);
    writer.uint64(message.blobGasUsed);
  }

  static decode(reader: Reader, length: i32): BlobTransaction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BlobTransaction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hash = reader.string();
          break;

        case 2:
          message.blockNumber = reader.uint64();
          break;

        case 3:
          message.timestamp = reader.string();
          break;

        case 4:
          message.blobGasUsed = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hash: string;
  blockNumber: u64;
  timestamp: string;
  blobGasUsed: u64;

  constructor(
    hash: string = "",
    blockNumber: u64 = 0,
    timestamp: string = "",
    blobGasUsed: u64 = 0
  ) {
    this.hash = hash;
    this.blockNumber = blockNumber;
    this.timestamp = timestamp;
    this.blobGasUsed = blobGasUsed;
  }
}
